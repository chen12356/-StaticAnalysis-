git终端显示乱码问题：
	解决: git config --global core.quotepath false


git init   #初始化本地git仓库

git clone  xxx.git    #第一次直接克隆远程仓库

vim .gitignore   # 里面添加git提交的忽略文件名
	设置之后：git add ./    #将会忽略 .gitignore 中指定的文件


git status   #查看本地哪些文件做了修改: 红色的文件

git add ./   #  ./ 当前文件下所有红色的文件   或者 也可以是文件名 。 
	操作之后：git status  --> 结果讲变成绿色（说明修改的添加到暂存区了）


git commit -m '提交的注释：添加的功能A。。'    # 为本次的提交添加注释（等以后撤销等操作可以只能回到某些功能上/修改前）



△注意推送操作：
	首先--查看你本地的连接的远程仓库地址是不是正确的
		git remote show origin  #可以查看到远程连接的仓库地址、追踪的分支
	其次--查看本地仓库处于哪一个分支：  git branch -a   #可以看到分支前面有* 号，就代表当前处于分支
		
git push origin 分支名称    # 推送到指定的分支名称上
	1、如果推送失败：可能是远程的分支内容做了更新，你需要重新pull 下这个分支的最新内容
	2、存在冲突，需要解决，然后在推送
		冲突的例子：
		<<<<<< HEAD
		#今天天气很好～   --> head下面的是本地修改的内容
		======
		#本地待提交
		>>>>>> 47583754357983   
		如何解决： 协商解决-->然后看保留哪些，或者都保留 --> 重新改的完成之后删除对应三行提示：<<<<<<HEAD  、 =======  、>>>>78758433435   
			  重新在进行 commit  --> 然后在进行推送 (注意推送的分支不能搞错)


项目中自己写的功能代码需要放到自己的分支里面，此时应该如下操作：

	1、可以在远程先创建分支，我通常直接在本地创建好分支，直接推送到远程
		git branch -a	# 首先查看仓库的分支，没有自己的分支需要新建分支（如果有查看*是否指向自己的分支，
								如果不是需要进行切换分支 git checkout 自己分支）
	2、新建自己的分支，比如：新建分支dev，并推送到远程(同步分支),接着切换到自己分支
		git branch dev      #新建dev分支
		git push origin dev #推送本地分支到远程，达到同步
		git checkout dev    #切换到dev分支
		git branch -a       #可以确认下是否切换到自己分支了(可忽略)	
	3、推送代码到自己分支
		对代码如果进行了修改，首先当前仓库是指向自己分支的 如dev
		  git status   #查看修改了什么
		  git add 修改文件名  #加入暂存区
		  git commit -m '相应注释'   #提交
		  git push origin dev   # 千万注意：推送指向的远程自己的dev分支


如何将代码回退到指定版本的状态
	场景：我项目开发过程中，推送 3 次代码到远程仓库，现在想由于一些功能被剔除，不需要最后两次的提交的代码，
	      如何让自己本地项目和远程仓库的代码回到当初第一次提交时的代码？
	解决： 
	      由于我们代码已经推送到了远程仓库，首选方案：利用 revert 撤销/还原/回滚，这样可以避免冲突,需注意当前工作空间是干净的。
							revert原理：用一个新提交来消除一个历史提交所做的任何修改.
		1、git log  #查看推送的历史版本
		2、我需要将代码还原到最后提交的第3次(将之前最后两次的回滚到最新提交的第3次)
			记录最后提交第3次的 commit id -->如：043a04c38a75cf2755baf5c5e7f9d83585789e45   当时注释写着：添加第一步内容...
			注意注意：因为最后一次的修改在别的文件中修改的，倘若你直接git revert commit_id 上面那个id的话  存在问题，
				需要进行一步一步的回滚回去，知道回滚到你想要回的那个位置就好了 。
			可能是我没看revert命令还有啥参数，我在尝试的时候，直接git revert 目标id  但是我发现代码中最后一次提交的所修改的内容还存在。(我可能觉得是文件不同...)
		3、执行玩之后，你会发现你本地的代码已经回滚了，远程的还没有，那么此时commit 、然后推送push 远程即可。。

合并分支： 假设我现在dev分支的功能开发完善了，我需要合并到master分支上，该如何做？
    这个一般都是在网上进行合并的，需要发请求，其他开发人员同意，有冲突协商解决，没问题就可以直接合并了。
			




